import { z } from "zod";

const CountrySchema = z.object({
	id: z.string(),
	iso_2: z.string().optional(),
	iso_3: z.string().optional(),
	num_code: z.number().optional(),
	name: z.string().optional(),
	display_name: z.string().optional(),
});

const PaymentProviderSchema = z.object({
	id: z.string(),
	is_enabled: z.boolean().optional(),
});

const RegionSchema = z.object({
	id: z.string(),
	name: z.string(),
	currency_code: z.string(),
	automatic_taxes: z.boolean().optional(),
	countries: z.array(CountrySchema).optional(),
	payment_providers: z.array(PaymentProviderSchema).optional(),
	metadata: z.record(z.any()).optional(),
	created_at: z.string().optional(),
	updated_at: z.string().optional(),
});

const AddressSchema = z.object({
	id: z.string(),
	customer_id: z.string().optional(),
	first_name: z.string().optional(),
	last_name: z.string().optional(),
	phone: z.string().optional(),
	company: z.string().optional(),
	address_1: z.string().optional(),
	address_2: z.string().optional(),
	city: z.string().optional(),
	country_code: z.string().optional(),
	province: z.string().optional(),
	postal_code: z.string().optional(),
	metadata: z.record(z.any()).optional(),
	created_at: z.string().optional(),
	updated_at: z.string().optional(),
});

const OptionValueSchema = z.object({
	id: z.string(),
	value: z.string(),
	option: z.record(z.any()).optional(),
	option_id: z.string(),
	metadata: z.record(z.any()).optional(),
	created_at: z.string().optional(),
	updated_at: z.string().optional(),
	deleted_at: z.string().optional(),
});

const ProductOptionSchema = z.object({
	id: z.string(),
	title: z.string(),
	product: z.record(z.any()).optional(),
	product_id: z.string().optional(),
	values: z.array(OptionValueSchema).optional(),
	metadata: z.record(z.any()).optional(),
	created_at: z.string().optional(),
	updated_at: z.string().optional(),
	deleted_at: z.string().optional(),
});

const VariantSchema = z.object({
	options: z.array(OptionValueSchema).optional(),
	product: z.record(z.any()).optional(),
	length: z.number().optional(),
	title: z.string().optional(),
	metadata: z.record(z.any()).optional(),
	id: z.string(),
	width: z.number().optional(),
	weight: z.number().optional(),
	height: z.number().optional(),
	origin_country: z.string().optional(),
	hs_code: z.string().optional(),
	mid_code: z.string().optional(),
	material: z.string().optional(),
	created_at: z.string().optional(),
	updated_at: z.string().optional(),
	deleted_at: z.string().optional(),
	product_id: z.string().optional(),
	sku: z.string().optional(),
	barcode: z.string().optional(),
	ean: z.string().optional(),
	upc: z.string().optional(),
	allow_backorder: z.boolean().optional(),
	manage_inventory: z.boolean().optional(),
	inventory_quantity: z.number().optional(),
	variant_rank: z.number().optional(),
	calculated_price: z
		.object({
			id: z.string(),
			is_calculated_price_price_list: z.boolean(),
			is_calculated_price_tax_inclusive: z.boolean(),
			calculated_amount: z.number(),
			calculated_amount_with_tax: z.number(),
			calculated_amount_without_tax: z.number(),
			is_original_price_price_list: z.boolean(),
			is_original_price_tax_inclusive: z.boolean(),
			original_amount: z.number(),
			currency_code: z.string(),
			calculated_price: z.record(z.any()),
			original_price: z.record(z.any()),
		})
		.optional(),
});

const ProductSchema = z.object({
	categories: z.array(z.record(z.any())).optional(),
	type: z.record(z.any()).optional(),
	length: z.number().optional(),
	title: z.string().optional(),
	status: z.string().optional(),
	options: z.array(ProductOptionSchema).optional(),
	description: z.string().optional(),
	id: z.string(),
	metadata: z.record(z.any()).optional(),
	created_at: z.string().optional(),
	updated_at: z.string().optional(),
	variants: z.array(VariantSchema).optional(),
	handle: z.string().optional(),
	subtitle: z.string().optional(),
	is_giftcard: z.boolean().optional(),
	thumbnail: z.string().optional(),
	width: z.number().optional(),
	weight: z.number().optional(),
	height: z.number().optional(),
	origin_country: z.string().optional(),
	hs_code: z.string().optional(),
	mid_code: z.string().optional(),
	material: z.string().optional(),
	collection: z
		.object({
			id: z.string(),
			title: z.string(),
			handle: z.string(),
			created_at: z.string(),
			updated_at: z.string(),
			deleted_at: z.string(),
			products: z.array(z.record(z.any())),
			metadata: z.record(z.any()),
		})
		.optional(),
	collection_id: z.string().optional(),
	type_id: z.string().optional(),
	tags: z
		.array(
			z.object({
				id: z.string(),
				value: z.string(),
				created_at: z.string(),
				updated_at: z.string(),
				deleted_at: z.string(),
				metadata: z.record(z.any()),
			}),
		)
		.optional(),
	images: z
		.array(
			z.object({
				id: z.string(),
				url: z.string(),
				created_at: z.string(),
				updated_at: z.string(),
				deleted_at: z.string(),
				metadata: z.record(z.any()),
			}),
		)
		.optional(),
	discountable: z.boolean().optional(),
	external_id: z.string().optional(),
	deleted_at: z.string().optional(),
});

const LineItemSchema = z.object({
	id: z.string(),
	title: z.string(),
	subtitle: z.string().optional(),
	thumbnail: z.string().optional(),
	quantity: z.number(),
	product: ProductSchema.optional(),
	product_id: z.string().optional(),
	product_title: z.string().optional(),
	product_description: z.string().optional(),
	product_subtitle: z.string().optional(),
	product_type: z.string().optional(),
	product_collection: z.string().optional(),
	product_handle: z.string().optional(),
	variant: VariantSchema.optional(),
	variant_id: z.string().optional(),
	variant_sku: z.string().optional(),
	variant_barcode: z.string().optional(),
	variant_title: z.string().optional(),
	variant_option_values: z.record(z.string()),
	requires_shipping: z.boolean().optional(),
	is_discountable: z.boolean().optional(),
	is_tax_inclusive: z.boolean().optional(),
	compare_at_unit_price: z.number().optional(),
	unit_price: z.number(),
	tax_lines: z
		.array(
			z.object({
				item: z.record(z.any()),
				item_id: z.string(),
				total: z.number(),
				subtotal: z.number(),
				id: z.string(),
				description: z.string(),
				tax_rate_id: z.string(),
				code: z.string(),
				rate: z.number(),
				provider_id: z.string(),
				created_at: z.string(),
				updated_at: z.string(),
			}),
		)
		.optional(),
	adjustments: z
		.array(
			z.object({
				item: z.record(z.any()),
				item_id: z.string(),
				id: z.string(),
				code: z.string(),
				amount: z.number(),
				cart_id: z.string(),
				description: z.string(),
				promotion_id: z.string(),
				provider_id: z.string(),
				created_at: z.string(),
				updated_at: z.string(),
			}),
		)
		.optional(),
	cart: z.record(z.any()).optional(),
	cart_id: z.string(),
	metadata: z.record(z.any()).optional(),
	created_at: z.string().optional(),
	updated_at: z.string().optional(),
	deleted_at: z.string().optional(),
	original_total: z.number(),
	original_subtotal: z.number(),
	original_tax_total: z.number(),
	item_total: z.number(),
	item_subtotal: z.number(),
	item_tax_total: z.number(),
	total: z.number(),
	subtotal: z.number(),
	tax_total: z.number(),
	discount_total: z.number(),
	discount_tax_total: z.number(),
});

const CartSchema = z.object({
	id: z.string(),
	region: RegionSchema.optional(),
	region_id: z.string(),
	customer_id: z.string().optional(),
	sales_channel_id: z.string().optional(),
	email: z.string().optional(),
	currency_code: z.string(),
	shipping_address: AddressSchema.optional(),
	billing_address: AddressSchema.optional(),
	items: z.array(LineItemSchema).optional(),
	shipping_methods: z
		.array(
			z.object({
				id: z.string(),
				cart_id: z.string(),
				name: z.string(),
				description: z.string(),
				amount: z.number(),
				is_tax_inclusive: z.boolean(),
				shipping_option_id: z.string(),
				data: z.record(z.any()),
				metadata: z.record(z.any()),
				tax_lines: z.array(
					z.object({
						shipping_method: z.record(z.any()),
						shipping_method_id: z.string(),
						total: z.number(),
						subtotal: z.number(),
						id: z.string(),
						description: z.string(),
						tax_rate_id: z.string(),
						code: z.string(),
						rate: z.number(),
						provider_id: z.string(),
						created_at: z.string(),
						updated_at: z.string(),
					}),
				),
				adjustments: z.array(
					z.object({
						shipping_method: z.record(z.any()),
						id: z.string(),
						code: z.string(),
						amount: z.number(),
						cart_id: z.string(),
						description: z.string(),
						promotion_id: z.string(),
						provider_id: z.string(),
						created_at: z.string(),
						updated_at: z.string(),
					}),
				),
				created_at: z.string(),
				updated_at: z.string(),
				original_total: z.number(),
				original_subtotal: z.number(),
				original_tax_total: z.number(),
				total: z.number(),
				subtotal: z.number(),
				tax_total: z.number(),
				discount_total: z.number(),
				discount_tax_total: z.number(),
			}),
		)
		.optional(),
	payment_collection: z
		.object({
			id: z.string(),
			currency_code: z.string(),
			region_id: z.string(),
			amount: z.number(),
			authorized_amount: z.number(),
			captured_amount: z.number(),
			refunded_amount: z.number(),
			refunded_amount_tax_amount: z.number(),
			metadata: z.record(z.any()),
			created_at: z.string(),
			updated_at: z.string(),
		})
		.optional(),

	discounts: z.array(
		z.object({
			id: z.string(),
			code: z.string(),
			is_dynamic: z.boolean(),
			rule: z.object({
				id: z.string(),
				description: z.string(),
				type: z.string(),
				allocation: z.string(),
				value: z.number(),
				created_at: z.string(),
				updated_at: z.string(),
				deleted_at: z.string(),
				metadata: z.record(z.any()),
			}),
			rule_id: z.string(),
			metadata: z.record(z.any()),
			created_at: z.string(),
			updated_at: z.string(),
			deleted_at: z.string(),
		}),
	),
	created_at: z.string().optional(),
	updated_at: z.string().optional(),
	metadata: z.record(z.any()),
	original_total: z.number(),
	original_subtotal: z.number(),
	original_tax_total: z.number(),
	total: z.number(),
	subtotal: z.number(),
	tax_total: z.number(),
	discount_total: z.number(),
	discount_tax_total: z.number(),
	gift_card_total: z.number(),
	gift_card_tax_total: z.number(),
	shipping_total: z.number(),
	shipping_tax_total: z.number(),
	refundable_amount: z.number(),
	refundable_tax_amount: z.number(),
});

export { CartSchema, LineItemSchema };
